@page "/topping"
@inject IMediator mediator

@using Architecture.Toppings.Query.GetAllToppingsQuery

<div class="row">
	<div class="col-10 mt-2 offset-1">
		<div class="card bg-secondary">
			<div class="row mt-5 mx-1">
				<div class="col-12 text-center"><h1 class="">What you looking for?</h1></div>
				<div class="col-4 offset-4 text-center mt-3 mb-5 d-flex justify-content-center">
					<input class="input-group-text" disabled="@IsProcessing" @oninput="(e) => filterToppings(e)"/>
				</div>
			</div>
			<div class="card-body bg-white">

				@if (IsProcessing)
				{
					<LoadingComponent></LoadingComponent>
				}
				else
				{
					<RadzenDataGrid AllowFiltering="false" AllowColumnResize="false" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="false" PageSize="10" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
									Data="@toppings" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or" SelectionMode="DataGridSelectionMode.Single">
						<Columns>
							<RadzenDataGridColumn Property="@nameof(Topping.Name)" Filterable="false" Title="Name" Frozen="true" Width="160px" TextAlign="TextAlign.Center" />
							@if (false)@* image exist, display it (not implemetned yet) *@
							{ }
							<RadzenDataGridColumn Property="@nameof(Topping.IsAvailable)" Title="Available" Frozen="true" Width="160px" />
							<RadzenDataGridColumn Property="@nameof(Topping.Price)" Title="Price" Width="160px" />
						</Columns>
					</RadzenDataGrid>
				}

			</div>
		</div>
	</div>
</div>

